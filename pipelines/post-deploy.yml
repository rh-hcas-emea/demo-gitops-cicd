apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: post-deploy
spec:
  workspaces:
  - name: source
  - name: scratch

  params:
  - name: app-name
    type: string
    description: Name of the application

  - name: image-url
    type: string
    description: Image url to deploy

  - name: image-digest
    type: string
    description: Image namespace

  - name: environment
    type: string
    default: dev
    description: Environment the application was deployed to

  - name: git-url
    type: string
    description: URL of the git repository to update

  - name: git-branch
    type: string
    default: main
    description: Branch of the git repository

  - name: env-dev
    type: string
    default: dev
    description: Name/suffix used for the development environment

  - name: env-stage
    type: string
    default: stage
    description: Name/suffix used for the staging environment

  - name: env-prod
    type: string
    default: prod
    description: Name/suffix used for the production environment

  - name: mock-webhooks
    type: string
    default: 'false'
    description: Toggle on webhook mocks for systems where the needed webhooks will be unavailable

  tasks:
  - name: image-digest
    taskRef:
      name: image-digest
    params:
    - name: image
      value: docker://$(params.image-url):$(params.image-tag)

  - name: clone
    taskRef:
      name: git-clone
      kind: ClusterTask
    workspaces:
    - name: output
      workspace: source
    params:
    - name: url
      value: $(params.git-url)
    - name: revision
      value: $(params.git-branch)

  - name: update-image-ref
    taskRef:
      name: kustomize
    runAfter:
    - clone
    - image-digest
    workspaces:
    - name: source
      workspace: source
    params:
    - name: args
      value:
        - edit
        - set
        - image
        - "$(params.image-url)@$(tasks.image-digest.results.digest)"
    - name: path
      value: $(workspaces.source.path)/overlays/$(params.environment)

  - name: commit
    taskRef:
      name: git-cli
      kind: ClusterTask
    runAfter:
    - update-image-ref
    workspaces:
    - name: source
      workspace: source
    - name: input
      workspace: scratch
    params:
    - name: GIT_USER_NAME
      value: $(params.git-username)
    - name: GIT_USER_EMAIL
      value: $(params.git-email)
    - name: GIT_SCRIPT
      value: |
        git commit -am '$(params.git-primary-message)$(params.environment)' \
          -m '$(params.git-secondary-message)$(params.image-url)@$(tasks.image-digest.results.digest)' || true
        git tag $(params.environment)
        git push origin HEAD:$(params.git-branch)
        git push origin --tags --force

  - name: argo-sync
    taskRef:
      name: argocd-task-sync-and-wait
    runAfter:
    - commit
    params:
    - name: argocd-version
      value: v2.2.5
    - name: application-name
      value: $(params.app-name)-$(params.environment)
    - name: revision
      value: $(params.git-branch)
    - name: flags
      value: --insecure

  - name: tag-image-stage
    taskRef:
      kind: ClusterTask
      name: skopeo-copy
    runAfter:
      - argo-sync
    when:
      - input: $(params.environment)
        operator: in
        values: ["$(params.env-dev)"]
    workspaces:
      - name: images-url
        workspace: scratch
    params:
      - name: srcImageURL
        value: docker://$(params.image-url):$(params.image-tag)
      - name: destImageURL
        value: docker://$(params.image-url):$(params.env-stage)

  - name: mock-webhook-stage
    taskRef:
      name: quay-webhook
    runAfter:
      - tag-image-stage
    when:
      - input: $(params.mock-webhooks)
        operator: in
        values: ['true']
    params:
      - name: image-name
        value: $(params.app-name)
      - name: image-namespace
        value: $(params.image-namespace)
      - name: image-tag
        value: $(params.env-stage)

  - name: tag-image-prod
    taskRef:
      kind: ClusterTask
      name: skopeo-copy
    runAfter:
      - argo-sync
    when:
      - input: $(params.environment)
        operator: in
        values: ["$(params.env-stage)"]
    workspaces:
      - name: images-url
        workspace: scratch
    params:
      - name: srcImageURL
        value: docker://$(params.image-url):$(params.image-tag)
      - name: destImageURL
        value: docker://$(params.image-url):$(params.env-prod)

  - name: mock-webhook-prod
    taskRef:
      name: quay-webhook
    runAfter:
      - tag-image-prod
    when:
      - input: $(params.mock-webhooks)
        operator: in
        values: ['true']
    params:
      - name: image-name
        value: $(params.app-name)
      - name: image-namespace
        value: $(params.image-namespace)
      - name: image-tag
        value: $(params.env-prod)
