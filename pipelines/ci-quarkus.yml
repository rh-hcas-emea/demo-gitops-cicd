apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ci-quarkus
spec:
  workspaces:
    - name: source
    - name: k8s-source
    - name: scratch
  params:
    - name: app-name
      type: string
      description: Name of the application

    - name: git-url
      type: string
      description: URL of the git repository containing application source code

    - name: git-revision
      type: string
      default: main
      description: Git revision to checkout application source code

    - name: image-url
      type: string
      description: Container image URL to publish

    - name: image-tag
      type: string
      default: latest
      description: Container image tag to publish

    - name: k8s-git-url
      type: string
      description: URL of the git repository containing k8s manifests

    - name: k8s-git-branch
      type: string
      default: main
      description: Git revision to checkout k8s manifests

    - name: k8s-git-dir
      type: string
      default: .
      description: Directory to update kustomize in

#    - name: mock-webhooks
#      type: string
#      default: 'true'
#      description: Toggle on webhook mocks for systems where the needed webhooks will be unavailable

  tasks:
    - name: clean
      taskRef:
        name: script-185
      workspaces:
        - name: workspace
          workspace: source
      params:
        - name: script
          value: rm -rf target
        - name: workingDir
          value: $(workspaces.workspace.path)

    - name: clone
      taskRef:
        name: git-clone
        kind: ClusterTask
      runAfter: ['clean']
      workspaces:
        - name: output
          workspace: source
      params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: $(params.git-revision)

    - name: test
      taskRef:
        name: maven
        kind: ClusterTask
      runAfter: ['clone']
      workspaces:
        - name: source
          workspace: source
        - name: maven-settings
          workspace: scratch
      params:
        - name: GOALS
          value: ['-B', 'verify']
        - name: MAVEN_IMAGE
          value: registry.access.redhat.com/ubi8/openjdk-17

    - name: build
      taskRef:
        name: buildah
        kind: ClusterTask
      runAfter: ['clone']
      workspaces:
        - name: source
          workspace: source
      params:
        - name: DOCKERFILE
          value: ./Containerfile
        - name: IMAGE
          value: $(params.image-url):$(params.image-tag)

    - name: k8s-clone
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
        - name: output
          workspace: k8s-source
      params:
        - name: url
          value: $(params.k8s-git-url)
        - name: revision
          value: $(params.k8s-git-branch)

    - name: update-image-dev
      taskRef:
        name: kustomize
      runAfter:
        - k8s-clone
        - build
        - test
      workspaces:
        - name: source
          workspace: k8s-source
      params:
        - name: args
          value:
            - edit
            - set
            - image
            - "$(params.image-url)@$(tasks.build.results.IMAGE_DIGEST)"
        - name: path
          value: $(workspaces.source.path)/$(params.k8s-git-dir)

    - name: k8s-commit
      taskRef:
        name: git-cli
        kind: ClusterTask
      runAfter:
        - update-image-dev
      workspaces:
        - name: source
          workspace: k8s-source
        - name: input
          workspace: scratch
      params:
        - name: GIT_USER_NAME
          value: ci
        - name: GIT_USER_EMAIL
          value: ci@example.com
        - name: GIT_SCRIPT
          value: |
            git commit -am 'Promote to dev' \
              -m '- image: $(params.image-url)@$(tasks.build.results.IMAGE_DIGEST)' || true
            git push origin HEAD:$(params.k8s-git-branch)

#    - name: mock-webhook
#      taskRef:
#        name: quay-webhook
#      runAfter:
#        - tag-image-dev
#      when:
#        - input: $(params.mock-webhooks)
#          operator: in
#          values: ['true']
#      params:
#        - name: image-name
#          value: $(params.app-name)
#        - name: image-namespace
#          value: $(params.image-namespace)
#        - name: image-tag
#          value: $(params.env-dev)
