apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ci-react
spec:
  workspaces:
    - name: source
    - name: scratch
  params:
    - name: app-name
      type: string
      description: Name of the application

    - name: git-url
      type: string
      description: URL of the git repository to update

    - name: git-revision
      type: string
      default: main
      description: Git revision to checkout

    - name: image-url
      type: string
      description: Image url to deploy

    - name: image-tag
      type: string
      default: latest
      description: Image tag to deploy

    - name: image-namespace
      type: string
      description: Namespace of the image

    - name: env-dev
      type: string
      default: dev
      description: Name/suffix for the development environment

    - name: mock-webhooks
      type: string
      default: 'true'
      description: Toggle on webhook mocks for systems where the needed webhooks will be unavailable

  tasks:
    - name: clean
      taskRef:
        name: script-1001
      workspaces:
        - name: workspace
          workspace: source
      params:
        - name: script
          value: rmscratch -rf node_modules
        - name: workingDir
          value: $(workspaces.workspace.path)

    - name: clone
      taskRef:
        name: git-clone
        kind: ClusterTask
      runAfter: ['clean']
      workspaces:
        - name: output
          workspace: source
      params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: $(params.git-revision)

    - name: install-deps
      taskRef:
        name: npm
      runAfter: ['clone']
      workspaces:
        - name: source
          workspace: source
      params:
        - name: args
          value: ['ci', '--verbose', '--no-audit']

    - name: test
      taskRef:
        name: npm
      runAfter: ['install-deps']
      workspaces:
        - name: source
          workspace: source
      params:
        - name: args
          value: ['test']

    - name: build
      taskRef:
        name: buildah
        kind: ClusterTask
      runAfter: ['clone']
      workspaces:
        - name: source
          workspace: source
      params:
        - name: DOCKERFILE
          value: ./Containerfile
        - name: IMAGE
          value: $(params.image-url):$(params.image-tag)

    - name: tag-image-dev
      taskRef:
        kind: ClusterTask
        name: skopeo-copy
      runAfter:
        - build
        - test
      workspaces:
        - name: images-url
          workspace: scratch
      params:
        - name: srcImageURL
          value: docker://$(params.image-url):$(params.image-tag)
        - name: destImageURL
          value: docker://$(params.image-url):$(params.env-dev)

    - name: mock-webhook
      taskRef:
        name: quay-webhook
      runAfter:
        - tag-image-dev
      when:
        - input: $(params.mock-webhooks)
          operator: in
          values: ['true']
      params:
        - name: image-name
          value: $(params.app-name)
        - name: image-namespace
          value: $(params.image-namespace)
        - name: image-tag
          value: $(params.env-dev)
